// src/Pages/Projects/ProjectShow.tsx

import React from "react";
import {
  Show,
  SimpleShowLayout,
  TextField,
  NumberField,
  DateField,
  useRecordContext,
  useNotify,
  useRefresh,
  useRedirect,
  useDataProvider,
  EditButton,
  DeleteButton,
} from "react-admin";
import { Typography, useTheme, Button, CardActions } from "@mui/material";
import { PieChart, Pie, Cell, Tooltip, Legend } from "recharts";
import { Project } from "../../interfaces/Project";
import { tokens } from "../../theme";

export const ProjectShow = (props: any) => (
  <Show {...props} actions={false}>
    <ProjectShowContent />
  </Show>
);

const ProjectShowContent = () => {
  const record = useRecordContext<Project>();
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const notify = useNotify();
  const refresh = useRefresh();
  const redirect = useRedirect();
  const dataProvider = useDataProvider();

  if (!record) return <div>Cargando...</div>;

  const handleChangeEstado = async () => {
    const newEstado =
      record.estado === "en progreso" ? "finalizado" : "en progreso";
    try {
      await dataProvider.update("projects", {
        id: record.id,
        data: { ...record, estado: newEstado },
        previousData: record,
      });
      notify("Estado actualizado correctamente", { type: "success" });
      refresh();
      redirect("/projects");
    } catch (error) {
      notify("Error al actualizar el estado", { type: "error" });
    }
  };

  // Determine if the project has reached full funding
  const isFullyFunded = record.donacionesRecibidas >= record.costoTotal;

  // Prepare data for the chart
  const data = [
    { name: "Cubierto", value: record.donacionesRecibidas },
    {
      name: "Faltante",
      value: Math.max(record.costoTotal - record.donacionesRecibidas, 0),
    },
  ];

  const colorsToUse = isFullyFunded
    ? [colors.redAccent[500], colors.blueAccent[500]]
    : [colors.greenAccent[500], colors.blueAccent[500]];

  return (
    <SimpleShowLayout>
      <Typography
        variant="h4"
        sx={{ color: colors.grey[100], marginBottom: 2 }}
      >
        {record.nombre}
      </Typography>
      <TextField source="descripcion" label="Descripción" />
      <TextField source="estado" label="Estado" />
      <NumberField source="nivelUrgencia" label="Nivel de Urgencia" />
      <DateField source="fechaInicio" label="Fecha de Inicio" />
      <DateField source="fechaFinEstimada" label="Fecha de Fin Estimada" />
      <NumberField source="costoTotal" label="Costo Total" />
      <NumberField source="donacionesRecibidas" label="Donaciones Recibidas" />
      <NumberField
        source="porcentajeAsignado"
        label="Porcentaje Asignado de Donaciones"
      />
      <TextField source="ubicacion" label="Ubicación" />

      {/* Financing Distribution Chart */}
      <Typography variant="h6" sx={{ color: colors.grey[100], marginTop: 4 }}>
        Distribución de Financiamiento
      </Typography>

      <PieChart width={400} height={400}>
        <Pie
          data={data}
          dataKey="value"
          nameKey="name"
          cx="50%"
          cy="50%"
          innerRadius={40}
          outerRadius={140}
          label={({ index, x, y, value }) => (
            <text
              x={x}
              y={y}
              fill={colors.grey[100]}
              textAnchor="middle"
              dominantBaseline="central"
              style={{ fontSize: "14px" }}
            >
              {data[index].name}: {value}
            </text>
          )}
        >
          {data.map((entry, index) => (
            <Cell
              key={`cell-${index}`}
              fill={colorsToUse[index % colorsToUse.length]}
            />
          ))}
        </Pie>
        <Tooltip
          contentStyle={{
            backgroundColor: colors.primary[400],
            color: colors.grey[100],
            border: `1px solid ${colors.grey[100]}`,
          }}
        />
        <Legend
          formatter={(value) => (
            <span style={{ color: colors.grey[100] }}>{value}</span>
          )}
        />
      </PieChart>

      {/* Button to change project status */}
      <Button
        variant="contained"
        onClick={handleChangeEstado}
        sx={{
          marginTop: 2,
          backgroundColor: colors.greenAccent[500],
          color: colors.grey[100],
          "&:hover": {
            backgroundColor: colors.greenAccent[700],
          },
        }}
      >
        {`Marcar como ${
          record.estado === "en progreso" ? "Finalizado" : "En Progreso"
        }`}
      </Button>

      {/* Edit and Delete buttons */}
      <CardActions>
        <EditButton
          sx={{
            color: colors.greenAccent[500],
            "&:hover": {
              color: colors.greenAccent[100],
            },
          }}
        />
        <DeleteButton />
      </CardActions>
    </SimpleShowLayout>
  );
};
